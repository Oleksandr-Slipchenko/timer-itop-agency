{"version":3,"sources":["webpack:///./index.js"],"names":["refs","startBtn","document","querySelector","stopBtn","waitBtn","resetBtn","clockface","timer","onTick","setTimeout","isDoublePress","this","intervalId","isActive","init","pressed","lastPressed","time","getTimeComponents","countTime","startTime","Date","now","setInterval","deltaTime","start","style","visibility","localStorage","textContent","spendTime","Number","getItem","split","join","stop","clearInterval","wait","e","keyCode","setItem","timeOut","reset","pad","value","String","padStart","hours","Math","floor","mins","secs","addEventListener","bind"],"mappings":"qLAEA,IAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,yBACjCC,QAASF,SAASC,cAAc,wBAChCE,QAASH,SAASC,cAAc,wBAChCG,SAAUJ,SAASC,cAAc,yBACjCI,UAAWL,SAASC,cAAc,kBAoH9BK,EAAQ,I,WAhHZ,cAAwB,I,MAAA,OAAVC,EAAU,EAAVA,O,EAmEJ,kBAAMC,YAAW,kBAAO,EAAKC,eAAgB,IAAQ,O,EAnEvC,a,EAAA,M,sFACtBC,KAAKC,WAAa,KAClBD,KAAKE,UAAW,EAChBF,KAAKH,OAASA,EAEdG,KAAKG,OAELH,KAAKI,QAAU,KACfJ,KAAKK,YAAc,KACnBL,KAAKD,cAAgB,K,2BAGvBI,KAAA,WACE,IAAMG,EAAON,KAAKO,kBAAkB,GACpCP,KAAKH,OAAOS,I,EAGdE,UAAA,WAAY,WACJC,EAAYC,KAAKC,MACvBX,KAAKE,UAAW,EAEhBF,KAAKC,WAAaW,aAAY,WAC5B,IACMC,EADcH,KAAKC,MACOF,EAE1BH,EAAO,EAAKC,kBAAkBM,GAEpC,EAAKhB,OAAOS,KACX,M,EAGLQ,MAAA,WAAQ,WAIN,GAHA1B,EAAKC,SAAS0B,MAAMC,WAAa,SACjC5B,EAAKI,QAAQuB,MAAMC,WAAa,WAE5BhB,KAAKE,SAIT,GAAIe,aAAaX,MAAuC,aAA/BlB,EAAKO,UAAUuB,YAA4B,CAClE,IAAMC,EACuD,IAA3DC,OAAOH,aAAaI,QAAQ,QAAQC,MAAM,KAAKC,KAAK,KAEhDd,EAAYC,KAAKC,MACvBX,KAAKE,UAAW,EAEhBF,KAAKC,WAAaW,aAAY,WAC5B,IACMC,EADcH,KAAKC,MACOF,EAAYU,EACtCb,EAAO,EAAKC,kBAAkBM,GAEpC,EAAKhB,OAAOS,KACX,UAEHN,KAAKQ,a,EAITgB,KAAA,WACEpC,EAAKI,QAAQuB,MAAMC,WAAa,SAChC5B,EAAKC,SAAS0B,MAAMC,WAAa,UACjCS,cAAczB,KAAKC,YACnBD,KAAKE,UAAW,EAChB,IAAMI,EAAON,KAAKO,kBAAkB,GACpCP,KAAKH,OAAOS,I,EAKdoB,KAAA,SAAKC,GACH3B,KAAKI,QAAUuB,EAAEC,QAEb5B,KAAKD,eAAiBC,KAAKI,UAAYJ,KAAKK,aAC9CL,KAAKD,eAAgB,EACrBX,EAAKI,QAAQuB,MAAMC,WAAa,SAChC5B,EAAKC,SAAS0B,MAAMC,WAAa,UACjCC,aAAaY,QAAQ,OAAQzC,EAAKO,UAAUuB,aAC5CO,cAAczB,KAAKC,YACnBD,KAAKE,UAAW,IAEhBF,KAAKD,eAAgB,EACrBC,KAAK8B,WAGP9B,KAAKK,YAAcL,KAAKI,S,EAG1B2B,MAAA,WACE3C,EAAKC,SAAS0B,MAAMC,WAAa,SACjC5B,EAAKI,QAAQuB,MAAMC,WAAa,UAChCS,cAAczB,KAAKC,YACnBD,KAAKE,UAAW,EAChB,IAAMI,EAAON,KAAKO,kBAAkB,GACpCP,KAAKH,OAAOS,GACZN,KAAKQ,a,EAGPwB,IAAA,SAAIC,GACF,OAAOC,OAAOD,GAAOE,SAAS,EAAG,M,EAGnC5B,kBAAA,SAAkBD,GAOhB,MAAO,CAAE8B,MANKpC,KAAKgC,IACjBK,KAAKC,MAAOhC,EAAO,MAAR,OAKGiC,KAHHvC,KAAKgC,IAAIK,KAAKC,MAAOhC,EAAO,KAAR,MAGXkC,KAFTxC,KAAKgC,IAAIK,KAAKC,MAAOhC,EAAO,IAAe,Q,KAM9C,CAAU,CACtBT,OAWF,YAAgD,IAArBuC,EAAqB,EAArBA,MAAOG,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACtCpD,EAAKO,UAAUuB,YAAiBkB,EAAhC,IAAyCG,EAAzC,IAAiDC,KATnDpD,EAAKC,SAASoD,iBAAiB,QAAS7C,EAAMkB,MAAM4B,KAAK9C,IAEzDR,EAAKI,QAAQiD,iBAAiB,QAAS7C,EAAM4B,KAAKkB,KAAK9C,IAEvDR,EAAKK,QAAQgD,iBAAiB,QAAS7C,EAAM8B,KAAKgB,KAAK9C,IAEvDR,EAAKM,SAAS+C,iBAAiB,QAAS7C,EAAMmC,MAAMW,KAAK9C,M","file":"main.aca1213c47b01e2a39a9.js","sourcesContent":["import './styles.css';\n\nconst refs = {\n  startBtn: document.querySelector('[data-action=\"start\"]'),\n  stopBtn: document.querySelector('[data-action=\"stop\"]'),\n  waitBtn: document.querySelector('[data-action=\"wait\"]'),\n  resetBtn: document.querySelector('[data-action=\"reset\"]'),\n  clockface: document.querySelector('.js-clockface'),\n};\n\nclass Timer {\n  constructor({ onTick }) {\n    this.intervalId = null;\n    this.isActive = false;\n    this.onTick = onTick;\n\n    this.init();\n\n    this.pressed = null;\n    this.lastPressed = null;\n    this.isDoublePress = null;\n  }\n\n  init() {\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n  }\n\n  countTime() {\n    const startTime = Date.now();\n    this.isActive = true;\n\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n\n      const time = this.getTimeComponents(deltaTime);\n\n      this.onTick(time);\n    }, 1000);\n  }\n\n  start() {\n    refs.startBtn.style.visibility = 'hidden';\n    refs.stopBtn.style.visibility = 'visible';\n\n    if (this.isActive) {\n      return;\n    }\n\n    if (localStorage.time && refs.clockface.textContent !== '00:00:00') {\n      const spendTime =\n        Number(localStorage.getItem('time').split(':').join('')) * 1000;\n\n      const startTime = Date.now();\n      this.isActive = true;\n\n      this.intervalId = setInterval(() => {\n        const currentTime = Date.now();\n        const deltaTime = currentTime - startTime + spendTime;\n        const time = this.getTimeComponents(deltaTime);\n\n        this.onTick(time);\n      }, 1000);\n    } else {\n      this.countTime();\n    }\n  }\n\n  stop() {\n    refs.stopBtn.style.visibility = 'hidden';\n    refs.startBtn.style.visibility = 'visible';\n    clearInterval(this.intervalId);\n    this.isActive = false;\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n  }\n\n  timeOut = () => setTimeout(() => (this.isDoublePress = false), 300);\n\n  wait(e) {\n    this.pressed = e.keyCode;\n\n    if (this.isDoublePress && this.pressed === this.lastPressed) {\n      this.isDoublePress = false;\n      refs.stopBtn.style.visibility = 'hidden';\n      refs.startBtn.style.visibility = 'visible';\n      localStorage.setItem('time', refs.clockface.textContent);\n      clearInterval(this.intervalId);\n      this.isActive = false;\n    } else {\n      this.isDoublePress = true;\n      this.timeOut();\n    }\n\n    this.lastPressed = this.pressed;\n  }\n\n  reset() {\n    refs.startBtn.style.visibility = 'hidden';\n    refs.stopBtn.style.visibility = 'visible';\n    clearInterval(this.intervalId);\n    this.isActive = false;\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n    this.countTime();\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n\n  getTimeComponents(time) {\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n    );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { hours, mins, secs };\n  }\n}\n\nconst timer = new Timer({\n  onTick: updateClockFace,\n});\n\nrefs.startBtn.addEventListener('click', timer.start.bind(timer));\n\nrefs.stopBtn.addEventListener('click', timer.stop.bind(timer));\n\nrefs.waitBtn.addEventListener('click', timer.wait.bind(timer));\n\nrefs.resetBtn.addEventListener('click', timer.reset.bind(timer));\n\nfunction updateClockFace({ hours, mins, secs }) {\n  refs.clockface.textContent = `${hours}:${mins}:${secs}`;\n}\n"],"sourceRoot":""}